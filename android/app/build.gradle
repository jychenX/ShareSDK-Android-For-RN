apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"]
 * ]
 *

//apply from: "../../node_modules/react-native/react.gradle"

apply from: "react.gradle"

//apply from: "E:/React Native/project/ShareSDKRN/node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 23
    buildToolsVersion "22"

    defaultConfig {
        applicationId "cn.sharesdk.demo"
        minSdkVersion 16
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.facebook.react:react-native:+'
    // From node_modules
    compile files('libs/MobCommons-2016.0426.1819.jar')
    compile files('libs/MobTools-2016.0426.1819.jar')
    compile files('libs/ShareSDK-Alipay-2.7.2.jar')
    compile files('libs/ShareSDK-Core-2.7.2.jar')
    compile files('libs/ShareSDK-Douban-2.7.2.jar')
    compile files('libs/ShareSDK-Dropbox-2.7.2.jar')
    compile files('libs/ShareSDK-Email-2.7.2.jar')
    compile files('libs/ShareSDK-Evernote-2.7.2.jar')
    compile files('libs/ShareSDK-Facebook-2.7.2.jar')
    compile files('libs/ShareSDK-FacebookMessenger-2.7.2.jar')
    compile files('libs/ShareSDK-Flickr-2.7.2.jar')
    compile files('libs/ShareSDK-Foursquare-2.7.2.jar')
    compile files('libs/ShareSDK-GooglePlus-2.7.2.jar')
    compile files('libs/ShareSDK-Instagram-2.7.2.jar')
    compile files('libs/ShareSDK-Instapaper-2.7.2.jar')
    compile files('libs/ShareSDK-KaiXin-2.7.2.jar')
    compile files('libs/ShareSDK-Kakao-Core-2.7.2.jar')
    compile files('libs/ShareSDK-KakaoStory-2.7.2.jar')
    compile files('libs/ShareSDK-KakaoTalk-2.7.2.jar')
    compile files('libs/ShareSDK-Line-2.7.2.jar')
    compile files('libs/ShareSDK-Linkedin-2.7.2.jar')
    compile files('libs/ShareSDK-Mingdao-2.7.2.jar')
    compile files('libs/ShareSDK-Pinterest-2.7.2.jar')
    compile files('libs/ShareSDK-Pocket-2.7.2.jar')
    compile files('libs/ShareSDK-QQ-2.7.2.jar')
    compile files('libs/ShareSDK-QZone-2.7.2.jar')
    compile files('libs/ShareSDK-Renren-2.7.2.jar')
    compile files('libs/ShareSDK-ShortMessage-2.7.2.jar')
    compile files('libs/ShareSDK-SinaWeibo-2.7.2.jar')
    compile files('libs/ShareSDK-TencentWeibo-2.7.2.jar')
    compile files('libs/ShareSDK-Tumblr-2.7.2.jar')
    compile files('libs/ShareSDK-Twitter-2.7.2.jar')
    compile files('libs/ShareSDK-VKontakte-2.7.2.jar')
    compile files('libs/ShareSDK-Wechat-2.7.2.jar')
    compile files('libs/ShareSDK-Wechat-Core-2.7.2.jar')
    compile files('libs/ShareSDK-Wechat-Favorite-2.7.2.jar')
    compile files('libs/ShareSDK-Wechat-Moments-2.7.2.jar')
    compile files('libs/ShareSDK-WhatsApp-2.7.2.jar')
    compile files('libs/ShareSDK-Yixin-2.7.2.jar')
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into 'libs'
}
